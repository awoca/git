import XCTest
@testable import Git

final class OpenTests: Tests {
    func testNoRepository() {
        let expect = expectation(description: "")
        git.open(url).sink(receiveCompletion: {
            XCTAssertEqual(.main, Thread.current)
            switch $0 {
            case .failure(Fail.Repository.none):
                expect.fulfill()
            default: break
            }
        }) { _ in
            XCTFail()
        }.store(in: &subs)
        waitForExpectations(timeout: 1)
    }
    
    func testOpenAfterCreate() {
        let expect = expectation(description: "")
        git.create(url).sink(receiveCompletion: {
            switch $0 {
            case .failure(_): XCTFail()
            default: break
            }
        }) { _ in
            self.git.open(self.url).sink(receiveCompletion: {
                switch $0 {
                case .failure(_): XCTFail()
                default: break
                }
            }) {
                XCTAssertEqual(.main, Thread.current)
                XCTAssertTrue($0.branch is MasterBranch)
                XCTAssertEqual(self.url, $0.url)
                expect.fulfill()
            }.store(in: &self.subs)
        }.store(in: &subs)
        waitForExpectations(timeout: 1)
    }
}
